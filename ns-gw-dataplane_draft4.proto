//*********************************
// Protobuf definition file of the controlplane of the LoRaWAN NS-GW Interface
//*********************************

//****************************************************
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
// "OPTIONAL" in this document are to be interpreted as described in BCP
// 14 [RFC2119] [RFC8174] when, and only when, they appear in all
// capitals
//****************************************************

// Data plane contains messages which are directly related to LoRaWAN traffic
// involving Devices. These are uplinks, downlinks and downlink acknowledments.
// LoRaWAN statistics are handled in the control plane part.

syntax = "proto3";

package lora_alliance.nsgw.data_plane.draft04;

message Payload {
    repeated SingleObject single_object = 1;
}

message SingleObject {
    oneof AllObjects {

        Success success = 1;
        Failure failure = 2;

        Uplink uplink = 11;
        UplinkFineTimestamps ul_fts = 12;

        ClassADownlink class_a_dl = 21;

        ClassBUnicast class_b_unicast = 22;

        ClassCUnicast class_c_unicast = 23; 

        ClassBAndCMulticast class_b_c_multicast = 24; 

        DownlinkAcknowledge dl_acknowledgement = 25;
        
    }
}

//************* Supporting Objects *************************

message Success {}
message Failure {}


// Indicating the clock source of the GW.
// it is the accuracy that is of interest
enum ClockSource {
    UNKNOWN = 0;     
    FREE_RUNNING = 1;
    NS_DRIVEN = 2;   //the internal clock is synchronised loosly to the NS
    NTP = 3;
    GNSS = 4;
}

// polarity, used for downlink radio definition
// Note: instead of polarity one could define UL, DL, Beacon
//enum Polarity {
//    INVERTED = 0;      //used for class A, B, and C downlinks
//    NOT_INVERTED = 1;  //used for beacons and device uplinks
//}

// AbsoluteTime in seconds and fraction of seconds.
// the absolute time is GPS zero.
// sufficient for more than 8000 years

message AbsoluteTime {
    // full seconds since gps zero, no leap seconds
    uint32 seconds_gps = 1;

    // fraction of second
    oneof sub_seconds {
        uint32 milli_seconds = 10; // 0..999
        uint32 micro_seconds = 11; // 0..999999
        uint32 nano_seconds = 12;  // 0..999999999
    }
}

// ============== UPLINK related messages =========================
// Uplink consists of the payload and meta data added by the GW.
// For each reception of a single message (for GWs with multiple antennas)
// separate radio information is generated.
//

message Uplink {

    // Payload: PHYPayload according RP002 chapter 4, resp. TS001, chapter 4.
    bytes payload = 1;

    // Uplink ID, generated by the GW.
    uint32 uplink_id = 2;

    // Late is set to true, if the UL packet is temporarly stored at the GW due to backhauling issues.
    // The default value is false. Late may be ommited if false. 
    bool late = 4;

    // Time the uplink arrived, measured at the end of the message
    AbsoluteTime arrival_time = 5;

    // to be discussed, it might be interesting
    ClockSource clock_source = 6;

    // Frequency in Hz
    uint32 frequency = 7;
    int32 frequency_offset = 8; //Question: GW shall calculate frequency out of central frequency and offset. Why is offset needed here?

    // Datarate, according Regional Parameter document and RFRegion
    // the first matching DR out of the configured data rate table shall be reported.
    // The NS shall handle disambiguities.
    uint32 datarate = 9;
    
    // Channelplan index of the datarate, according the internal DataRateTable. 
    uint32 cp_id = 10;

    // Radio info: for each receivement of the message there are separate
    // radio infos gathered and forwarded to the NS.
    // several receivements are considered as "identical message", if the payload is identical and
    // the arrival time is close enough.

    repeated RadioInfo radio_info = 11;
}


message RadioInfo {
    // Antenna ID.
    uint32 antenna_id = 1;

    // Uplink context. The uplink context will be used for class A downlinks.
    // The context SHALL allow the GW to send the downlink at a precise time
    // related to the uplink. The content of this context is not further defined.
    bytes context = 2;
 
    // RSSI measured for this uplink
    float rssi = 3;

    // LoRa SNR measured for this uplink
    float snr = 4;

    // Fine timestamp if available.
    FineTimestamp fine_timestamp = 5;
}

// GW to NS: the fine timestamp information can be sent separately from
// the payload and radio info. The uplink_id shall be the same as
// generated for the UL message previously sent to the NS.
message UplinkFineTimestamps{

    // Uplink ID, previously generated by the GW.
    uint32 uplink_id = 2;

    // list of fine timestamp info
    repeated FineTimestampInfo fine_timestamp_info = 3;
}

// FineTimestamp Info is needed if the FTS is forwarded to the NS separately
// from the payload and UL metadata.
message FineTimestampInfo {

    // Antenna ID
    uint32 antenna_id = 1;

    FineTimestamp fine_timestamp = 2;
}

// All FineTimestamps are delivered un-encrypted by the HAL.
// Only outdated HAL versions provided encrypted time stamps. 
message FineTimestamp {
    // Duration since GPS epoch, in seconds and nanoseconds
    AbsoluteTime absolute_time = 1;
 
    // Delta, given by HAL (?)
    // currently not clear what this is good for. 
    uint32 delta = 3;
}

//=============== DOWNLINK related messages ==========================

// Class A downink items are used in class A donwlink messages. 
message ClassADownlinkItem {
    // Payload
    bytes payload = 1;

    // Delay, relativ to UL in seconds.
    uint32 delay = 2;

    // Priority: in case of a conflict at the GW, the
    // GW SHALL prefere the message wiht higher priority
    uint32 priority = 4;

    // Frequency in Hz
    uint32 frequency = 5;

    // Polarity;
    // if polarity is not present, then the default value INVERTED is considered.
    //Polarity polarity = 6;

    // Datarate, according Regional Parameter document and RFRegion
    uint32 datarate = 7;

    // TXPower in dBm
    oneof tx_power {
        uint32 eir_power = 8;
        uint32 conducted_power = 9;
    }
}

// Generic downlink items are used in Class B DL (Pingslots) and
// class B and class C multicast downlinks
message GenericDownlinkItem {
    // Payload
    bytes payload = 1;

    // Timestamp of intended transmission
    AbsoluteTime absolute_time = 2;

    // In case of conflicts, the message with the higher priority SHALL
    // be preferred.
    uint32 priority = 4;

    // Frequency in Hz
    uint32 frequency = 5;

    // Polarity;
    // if polarity is not present, then the default value inverted is considered.
    //Polarity polarity = 6;

    // Datarate, according Regional Parameter document and RFRegion
    uint32 datarate = 7;

    // TXPower in dBm
    oneof tx_power {
        uint32 eir_power = 8;
        uint32 conducted_power = 9;
    }
}
 
// Window downlink items are used in class C DL messages. 
message WindowDownlinkItem {
    // Payload
    bytes payload = 1;

    // start time of the tx window
    AbsoluteTime absolute_time = 2;

    // duration of the window in seconds
    uint32 window_time = 3;

    uint32 priority = 4;

    // frequency in Hz
    uint32 frequency = 5;

    // Polarity;
    // if polarity is not present, then the default value inverted is considered.
    //Polarity polarity = 6;

    // Datarate, according Regional Parameter document and RFRegion
    uint32 datarate = 7;

    // TXPower in dBm
    oneof tx_power {
        uint32 eir_power = 8;
        uint32 conducted_power = 9;
    }
}


// Class A Downlink MAY hold two ClassA downlink items,
// one for RX1, one for RX2 window. The GW shall priorize
// according the order of downlink items.

message ClassADownlink {
    // Antenna ID, is transparently returned from UL.
    uint32 antenna_id = 2;

    // Downlink ID, generated at the NS
    uint32 downlink_id = 3;

    // UL Context, transparently returned from UL
    bytes context = 4;

    repeated ClassADownlinkItem downlinkItems = 5;  
}

 

message ClassBUnicast {

    uint32 antenna_id = 2;

    uint32 downlink_id = 3;

    repeated GenericDownlinkItem downlink_items = 6;
}

 

message ClassCUnicast {

    uint32 antenna_id = 2;

    uint32 downlink_id = 3;

    repeated WindowDownlinkItem downlink_items = 6;
}

 

message ClassBAndCMulticast {

    repeated uint32 antenna_id = 2;

    repeated uint32 delta_tx = 3;

    uint32 downlink_id = 4;

    uint32 time_accuracy = 5;

    repeated GenericDownlinkItem downlink_items = 6;
}


//====================== Downlink Acknowledgement =======================
// Acknowledge Types

enum AcknowledgeType {

    UNDEFINED = 0;

    //Successfull DL
    SUCCESS = 1;
 
    //generic, unidentified failure of DL. Only to be used if no further details SHALL be returned.
    FAILED = 2;

    //Class A, NS preferred RX2
    RX2_PREFERRED = 3;

    //Channel was busy
    CHANNEL_BUSY = 4;

    //Duty cycle limitation exceeded
    DC_EXCEEDED = 5;

    //Dwell time limitation esceeded
    DT_EXCEEDED = 6;

    //DL arrived to late at GW to be sent
    TO_LATE = 7;
           
    //LoRa Radio is off
    RADIO_OFF = 8;

    //Needed clock accuracy not met
    CLOCK_ACCURACY_NOT_MET = 9;

    //Parameter not not valid
    PARAM_NOT_VALID = 10;

    //Parameter not supported on GW
    PARAM_NOT_SUPPORTED = 11;

    //Internal HW or SW problem
    INTERNAL_PROBLEM = 12;

    //reserved for futureUse;
    //rfu12 = 13;
    //rfu13 = 14;
    //rfu14 = 15;
}

// Acnknowledge mode, usefull for constrained backhauling situations
enum AcknMode {
    SIMPLE_ALL = 0;
    SIMPLE_SUCCESS_ONLY = 1;
    SIMPLE_FAILURE_ONLY = 2;
    DETAILED_ALL = 3;
    DETAILED_SUCCESS_ONLY = 4;
    DETAILED_FAILURE_ONLY = 5;
}

// GW to NS: a downlink acknowledge can be detailed or simple.
// simple: only one final acknowledge type is transmitted (Failure or Success)
// detailed: for all items in the downlink message an item acknowledgement is generated until
// the type is success. An item acknowledgment can be a list of multiple acknowledge types.

message DownlinkAcknowledge {
    //list of acknowledgments for all downlink items

    message DetailedAckn {
        // list of acknowledge types per DL item

        message DownlinkItemAcknowledge{
            repeated AcknowledgeType dl_item_ackn = 1;
        }

        repeated DownlinkItemAcknowledge dl_items_ackn = 1;
    }

    uint32 downlink_id = 1;

    oneof dl_ackn {
        DetailedAckn  detailed_dl_ackn = 2;
        AcknowledgeType simple_dl_ackn = 3;
    }

    //Absolute time of sending the DL, only present if DL is sent.
    AbsoluteTime txTime = 4;
    ClockSource clockSource = 5;
}
