//****************************************************
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
// "OPTIONAL" in this document are to be interpreted as described in BCP
// 14 [RFC2119] [RFC8174] when, and only when, they appear in all
// capitals 
//****************************************************

//***************************
// Version based on list of singleOpjects payload, requested by GET, POST, PUT, or DELETE
//***************************

syntax = "proto3";

package lora_alliance.nsgw.control_plane.draft04;

import "google/protobuf/duration.proto";

message Payload {
    repeated SingleObject single_object = 1;
}

message SingleObject {
    oneof AllObjects {

        Empty empty = 1;
        Success success = 2;
        Failure failure = 3;

        RegistrationRequest reg_request = 11;
        RegistrationResponse reg_response = 12;
        Uptime uptime = 13;
        TimeInfo time_info = 14;

        Equipment equipment = 15;
        Versions versions = 16;
        Inventory inventory = 17;

        RegionOfOperationConfig region_of_operation = 21;
        RegionOfOperationResponse region_of_ops_response = 22;

        RadioUnits radio_units = 30;
        RadioUnitCapabilities radio_unit_capabilities = 31;
        RadioUnitConfig radio_unit_config = 32;
        RadioUnitResponse radio_unit_resp = 33;
        RadioUnitEvent radio_unit_event = 34;

        Antennas antennas = 40;
        AntennaCapabilities antenna_capabilities = 41;
        AntennaConfig antenna_config = 42;
        AntennaResponse antenna_response = 43;

        DataRateTableConfig dr_table_config = 51;
        DataRateTableResponse dr_table_response = 52;

        ChannelConfiguration channel_config = 61;
        ChannelConfigResponse channel_config_response = 62;

        FineTimeStampCapabilities fts_capabilities = 71;
        FineTimeStampConfig fts_config = 72;
        FineTimeStampResponse fts_response = 73;
        FineTimeStampEvent fts_event = 74;

    }
}


// ***************************************** Generic Response opbjects ********************************

// Empty message for indication No Error, used as response for read only value transmission
// in a list or single objects. 
message Empty {}

//Empty Success message, indicating a success on the processing of an object, without containing additional information
message Success {}

//Generic Failure message, may be used to indicate an error in processing a object of the payload
message Failure {
    uint32 code = 1;
    string reason = 2;
}


// ******************************************** Registration messages *********************************

enum GwType {
    GW_TYPE_A = 0;  // Type A are GWs which can distribute their capabilities to one or multiple antennas.
}

message RegistrationRequest {
  //mandatory: Extended Unique Identifier (EUI-64) of the gateway. Each gateway SHALL have an assigned gw_eui.
  //The gw_eui is a globally unique gateway identifier in the IEEE EUI64 address space, managed by the OUI holder of the EUI. 
  fixed64 gw_eui = 1;
  
  // optional: if not defined, GW_TYPE_A is considered
  GwType gw_type = 2;
  
  //mandatory: Version and subversion of the NS-GW interface that are suppored by the GW.
  int32 version = 3;
  int32 sub_version = 4;  //for experimental versions, a negativ subversion number SHALL be used. 

}

message RegistrationResponse {
    message RegistrationSuccess{
        fixed32  gw_addr = 1;
    }
    
    message RegistrationFailure {
        enum RegistrationError {
            UNKNOWN_REG_ERROR = 0;
            GW_NOT_KNOWN = 1;
            GW_NOT_ALLOWED = 2;
            GW_TYPE_NOT_SUPPORTED = 3;
            VERSION_NOT_SUPPORTED = 4;
        }

        RegistrationError error = 1;
        google.protobuf.Duration idle_time=2;
    }

    oneof registration_response {
        RegistrationSuccess registration_success = 1;
        RegistrationFailure registration_failure = 2;
    }

}

// system uptime since last boot in seconds. 
message Uptime {
    uint64 uptime = 1;
}

// TimeInfo is sent from NS to GW to indicate the current GPS Time and the number of leapseconds passed since GPS 0
message TimeInfo {
    // GPS-Time in milliseconds
    uint64 time = 1;

    // number of leap seconds since GPS zero (Jan 6th )
    uint32 leap_seconds = 2;
}

// read only equipment description 
message Equipment{
    uint32 gw_manufacturer = 1;            //LoRa Alliance vendor ID. MUST be set to 0 if manufacturer is not a member of the LA.
    string gw_model = 2;                   //Gateway Model as defined by the manufacturer
    string serial_number = 3;              //Serial Number as assigned by the manufacturer
    string hw_revision = 4;                //GW hardware revision, assigned by the manufacturer 
}

message Versions {
    string os_version = 1;
    string fw_version = 2;
    string sw_version = 3;
    string hal_version = 4;
    string fpga_version = 5;
    string customizing = 6;
    string patch_level = 7;
}

// read only inventory description
message Inventory {
    uint32 nb_interfaces = 3;             //Number of WAN Interfaces
    uint32 nb_radio_units = 4;            //Number of radio units of the GW
    uint32 nb_antennas = 5;               //Number of LoRa Antennas
    uint32 nb_CPUs = 6;                   //Number of CPUs for system performance
    uint32 ram = 8;                       //size of RAM in MByte for memory usage
    uint32 nb_file_systems = 9;           //File systems for usage statistics. 
}


// ******************************************** Region of Operation messages *********************************

message RegionOfOperationConfig {
    uint32 region = 1;                    //Region of Operation
}

message RegionOfOperationResponse {
    message RegionOfOperationSuccess {

    }
    message RegionOfOperationFailure {
        enum RegionOfOperationError{
            REG_OF_OPS_UNKNOWN_ERROR = 0;
            REG_OF_OPS_NOT_SUPPORTED = 1;
            REG_OF_OPS_UNKNOWN_REG = 2;
        }

        RegionOfOperationError error = 1;
        
    }

    oneof region_of_operation_response {
        RegionOfOperationSuccess region_of_operation_success = 1;
        RegionOfOperationFailure region_of_operation_failure = 2;
    }

}


// ******************************************** Radio Unit messages *********************************

//RadioUnits MAY contain both, descritpion of the capabilities and configuration.
message RadioUnits {
    repeated RadioUnitCapabilities radio_units_capabilities = 1;
    repeated RadioUnitConfig radio_units_config = 2;
}

//read only description of the radio unit capabilities.
message RadioUnitCapabilities {
    uint32 id = 1;               //id of the radio unit
    uint32 nb_multi_css = 2;     //number of multi css channels supported
    uint32 nb_single_css = 3;    //number of single css channels supported
    uint32 nb_fsk = 4;           //number of fsk channels supported
    uint32 nb_lrfhss = 5;        //number of lr-fhss channels supported
    bool fine_time_stamp = 6;    //true if the radio unit supports fine time stamping
}
message RadioUnitConfig {}

message RadioUnitResponse {}

message RadioUnitEvent {
    enum RadioUnitState {
        RU_UNKONWN = 0;          //Unkown state
        RU_INIT    = 1;          //Radio unit gets initialized
        RU_RUNNING = 2;          //Radio unit has finished initialization and is functional
        RU_FAILED  = 3;          //Radio unit failed
    }

    uint32 id = 1;
    RadioUnitState ru_state = 2;  
}


// ******************************************** Antenna messages *************************************

enum AntennaType {
    OMNI = 0;
    SECTOR = 1;
}

enum AntennaMode {
    RX_TX = 0;                //Antenna will be used for receiving and sending messages
    RX_ONLY = 1;              //Antenna will be used for receiving messages only 
    RX_TX_OFF = 2;            //Antenna SHALL not be used
}

//Antennas MAY contain both, description of the capabilities and the configuration
message Antennas {
    repeated AntennaCapabilities antennas_capabilities = 1;
    repeated AntennaConfig antennas_configs= 2;
}

//read-only capabilities of the antenna
message AntennaCapabilities {
    uint32 id = 1;             //Identifier of the antenna
    uint32 radio_unit = 2;     //id of the radio unit this antenna is attached to
    bool fix = 3;              //true if the antenna is fix installed and not changable 
    string port_label = 4;     //external label of the antenna port
    uint32 max_gain = 5;       //max allowed antenna gain according the certification. This value MAY depend on the region of operation
    uint32 min_freq = 6;       //minimal frequency in Hz the antenna supports
    uint32 max_freq = 7;       //maximal frequency in Hz th antenna supports
}

//configuration of the antenna
//fields up to id 6 are used to represent the installation
//fields 11 and higher are used to configure operations mode. 
message AntennaConfig {
    uint32 id = 1;             //MANDATORY: ID of the antenna, cannot be overwriten
    bool present = 2;          //indicate if antenna is present or not installed
    uint32 ant_gain = 3;       //antenna gain in dB
    uint32 insertion_loss = 4; //insertion loss in dB
    AntennaType ant_type = 5;  //Antenna type
    uint32 delay = 6;          //delay of signal in ns from antenna to gw, only relevant for fine time stamping
    AntennaMode ant_mode = 11; //mode of usage
}

message AntennaResponse {
    message AntennaResponseSuccess{}
    message AntennaResponseFailure{}

    oneof antenna_response {
        AntennaResponseSuccess ant_success = 1;
        AntennaResponseFailure ant_failure = 2;
    }
}


// ******************************************** Data Rate Table messages *********************************

message DataRateTableConfig {
    uint32 id = 1;             //id is defined by the NS. Identical DR Table configs on different GWs shall have the same ID.
    string label = 2;          //label, defined by NS
    uint32 version = 3;        //version of the DR Table and label. 

    repeated DataRateRow data_rates = 11;
}

message DataRateTableResponse {}

message DataRateRow {
    message LoRaRow {
        uint32 sf = 1;         //Spreading Factor [7..12]
        uint32 bw = 2;         //bandwidth in kHz
    }
    message FSKRow {
        uint32 kbps = 1;       //Capacity in kbps
    }
    message LRFHSSRow {
        enum CR {
            UNKNOWN_CR = 0;
            CR_1_3 = 1;         //CR 1/3
            CR_2_3 = 2;         //CR 2/3
        }
        CR cr = 1;              //Coding rate
        uint32 bw = 2;          //bandwidth in kHz
    }

    uint32 cp_id = 1;           //Channel plan ID according RP-002
    uint32 dr = 2;              //Data rate according RP-002
    bool uplink = 3;            //true if this DR Row is used for uplinks
    oneof dr_row {
        LoRaRow lora_dr = 11;
        FSKRow  fsk_dr  = 12;
        LRFHSSRow lrfhss_dr = 13;
    }
}


// ******************************************** Channel Configuration messages *********************************

message ChannelConfiguration {
    uint32 id = 1;             //id is defined by the NS. Identical ChannelConfigs on different GWs shall have the same ID.
    string label = 2;
    uint32 version = 3;

    repeated RXChannel rx_channels = 11;
}
message ChannelConfigResponse {}

message RXChannel {
    uint32 id = 1;
    bool enabled = 2;
    uint32 antenna_id = 3;
    uint32 frequecy = 4;        //frequency of channel in Hz
    uint32 cp_id = 5;           //Channel plan ID 
    uint32 dr_low = 6;          //DR lower range limit for multi css channel definitions, or DR for single DR channels
    uint32 dr_high = 7;         //DR higher range limit for multi css channels only,
}


// ******************************************** Fine Timestamping messages ****************************************

message FineTimeStampCapabilities {}
message FineTimeStampConfig {}
message FineTimeStampResponse {}
message FineTimeStampEvent {}

