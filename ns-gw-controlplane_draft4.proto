//****************************************************
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
// "OPTIONAL" in this document are to be interpreted as described in BCP
// 14 [RFC2119] [RFC8174] when, and only when, they appear in all
// capitals 
//****************************************************

//***************************
// Version based on list of singleOpjects payload, requested by GET, POST, PUT, or DELETE
//***************************

syntax = "proto3";

package lora_alliance.nsgw.control_plane.draft04;

import "google/protobuf/duration.proto";

message Payload {
    repeated SingleObject single_object = 1;
}

message SingleObject {
    oneof AllObjects {

        Success success = 1;
        Failure failure = 2;

        GwIdentity gw_identity = 11;
        GwIdentityResponse gw_identity_response = 12;
        GwProfile gw_profile = 13;
        GwProfileResponse gw_profile_response = 14;

        Uptime uptime = 15;
        TimeInfo time_info = 16;

        Versions versions = 17;
        Inventory inventory = 18;

        RegionOfOperationConfig region_of_operation = 21;
        RegionOfOperationResponse region_of_ops_response = 22;

        RadioUnits radio_units = 30;
        RadioUnitCapabilities radio_unit_capabilities = 31;
        RadioUnitConfig radio_unit_config = 32;
        RadioUnitResponse radio_unit_resp = 33;
        RadioUnitEvent radio_unit_event = 34;

        Antennas antennas = 40;
        AntennaCapabilities antenna_capabilities = 41;
        AntennaConfig antenna_config = 42;
        AntennaResponse antenna_response = 43;

        DataRateTableConfig dr_table_config = 51;
        DataRateTableResponse dr_table_response = 52;

        ChannelConfiguration channel_config = 61;
        ChannelConfigResponse channel_config_response = 62;

        FineTimeStampCapabilities fts_capabilities = 71;
        FineTimeStampConfig fts_config = 72;
        FineTimeStampResponse fts_response = 73;
        FineTimeStampEvent fts_event = 74;

    }
}

// ObjectIds is used in getRequests as qOption for defining the list of objects to be retrieved.
// Valide numbers are taken from the AllObjects message.
message ObjectIds{
    repeated uint32 q = 1
}


// ***************************************** Generic Response opbjects ********************************
// generic messages MAY be used in the response message after processing a list of objects, if
// for each object in the request there shall be one object in the response. 

//Empty Success message, indicating a success on the processing of an object, without containing additional information
message Success {}

//Generic Failure message, may be used to indicate an error in processing a object of the payload
message Failure {
    uint32 code = 1;
    string reason = 2;
}


// ******************************************** Registration messages *********************************

enum GwType {
    GW_TYPE_A = 0;  // Type A are GWs which can distribute their capabilities to one or multiple antennas.
}

enum GwState {
    GW_STATE_UNKNOWN = 0;
    GW_COMMISIONED = 1;
    GW_REGIONALIZED = 2;
    GW_INITIALIZED = 3;
}

//For GW registration the GwIdentity object is send in PUT request to the NS. 
//GW registration is started after a successfull WSS session is established between NS and GW.
//For GW de-registration the GwIdentity object is sent in a DELETE request to the NS.
//In any case the GW will responde with a GWResponse message. 

message GwIdentity {

  //mandatory: Extended Unique Identifier (EUI-64) of the gateway. Each gateway SHALL have an assigned gw_eui.
  //The gw_eui is a globally unique gateway identifier in the IEEE EUI64 address space, managed by the OUI holder of the EUI. 
  fixed64 gw_eui = 1;

}

message GwIdentityResponse {
    message GwIdentitiySuccess{
        fixed32 gw_addr = 1;
    }
    
    message GwIdentityFailure {
        enum GwIdentityError {
            GW_ID_UNKNOWN_ERROR = 0;
            GW_ID_NOT_KNOWN = 1;
            GW_ID_NOT_ALLOWED = 2;
        }

        GwIdentityError error = 1;
        google.protobuf.Duration idle_time=2;             //idle time the GW SHALL wait until re-trying the next registration request. 
    }

    oneof gw_identity_response {
        GwIdentitySuccess gw_identity_success = 1;
        GwIdentityFailure gw_identity_failure = 2;
    }

    GwState gw_state = 3;          //GW state after processing the GW Identity Object

}

// GwProfile is sent to the NS during a registration request as a mandatory object. 
// The NS needs to support that gw_type and the version and subversion of the NS-GW interface.
message GwProfile {
  
  // optional: if not defined, GW_TYPE_A is considered
  GwType gw_type = 1;

  //mandatory: Version and subversion of the NS-GW interface that are suppored by the GW.
  int32 version = 2;
  int32 sub_version = 3;           //for experimental versions, a negativ subversion number SHALL be used. 

  uint32 gw_manufacturer = 11;     //LoRa Alliance vendor ID. MUST be set to 0 if manufacturer is not a member of the LA.
  string gw_model = 12;            //Gateway Model as defined by the manufacturer
  string serial_number = 13;       //Serial Number as assigned by the manufacturer
  string hw_revision = 14;         //GW hardware revision, assigned by the manufacturer 

}

//Response from the NS to the GW to a GwProfile object sent.
//Note: if the GW-Type is not supported at NS, any configuration of the Radio Unit and Antennas MAY fail. 
//      if the interface version is not supported, a lower version MAY be proposed by NS to GW. 
message GwProfileResponse {
    message GwProfileSuccess{
    }
    
    message GwProfileFailure {
        enum GwProfileError {
            GW_PROF_UNKNOWN_ERROR = 0;
            GW_PROF_TYPE_NOT_SUPPORTED = 3;
            GW_PROF_VERSION_NOT_SUPPORTED = 4;
        }

        GwProfileError error = 1;

        //NS proposed version and supversion of interface as fall back
        int32 version = 2;
        int32 sub_version = 3;           //for experimental versions, a negativ subversion number SHALL be used.       
    }

    oneof registration_response {
        GwProfileSuccess gw_profile_success = 1;
        GwProfileFailure gw_profile_failure = 2;
    }

}

// system uptime since last boot in seconds. 
message Uptime {
    uint64 uptime = 1;
}

// TimeInfo is sent from NS to GW to indicate the current GPS Time and the number of leapseconds passed since GPS 0
message TimeInfo {
    // GPS-Time in milliseconds
    uint64 time = 1;

    // number of leap seconds since GPS zero (Jan 6th )
    uint32 leap_seconds = 2;
}

// read only hw and sw versions
message Versions {
    string os_version = 1;
    string fw_version = 2;
    string sw_version = 3;
    string hal_version = 4;
    string fpga_version = 5;
    string customizing = 6;
    string patch_level = 7;
}

// read only inventory description
message Inventory {
    uint32 nb_interfaces = 1;             //Number of WAN Interfaces
    uint32 nb_radio_units = 2;            //Number of radio units of the GW
    uint32 nb_antennas = 3;               //Number of LoRa Antennas
    uint32 nb_CPUs = 4;                   //Number of CPUs for system performance
    uint32 ram = 5;                       //size of RAM in MByte for memory usage
    uint32 nb_file_systems = 6;           //File systems for usage statistics. 
    bool fine_time_stamping = 7;          //true if fts is supported, false or ommited otherwise
}


// ******************************************** Region of Operation messages *********************************

//Region of Opertation limits the radio restrictions according the regulator of the specified
//region. The region of operation configuration MAY change the state of the GW. 
message RegionOfOperationConfig {
    uint32 region = 1;                    //Region of Operation, according ISO-3166
}

//After the region of operation is set, the GW is in Regionalized state. Regulatory rules shall apply immediately on the GW like:
//Allowed frequency ranges, max conducted or emmited power, duty cycle limitations, and dwell time limitations. 
message RegionOfOperationResponse {
    message RegionOfOperationSuccess {
        gwState gw_state = 1;             //GW state after processing the region of operation configuration.
    }
    message RegionOfOperationFailure {
        enum RegionOfOperationError{
            REG_OF_OPS_UNKNOWN_ERROR = 0;
            REG_OF_OPS_NOT_SUPPORTED = 1;
            REG_OF_OPS_NOT_KNOWN = 2;
        }

        RegionOfOperationError error = 1;
        
    }

    oneof region_of_operation_response {
        RegionOfOperationSuccess region_of_operation_success = 1;
        RegionOfOperationFailure region_of_operation_failure = 2;
    }

}


// ******************************************** Radio Unit messages *********************************

//RadioUnits MAY contain both, descritpion of the capabilities and configuration.
message RadioUnits {
    repeated RadioUnitCapabilities radio_units_capabilities = 1;
    repeated RadioUnitConfig radio_units_config = 2;
}

//read only description of the radio unit capabilities.
message RadioUnitCapabilities {
    enum TxModulation {
        LORA = 0;
        FSK  = 1;
    }
    uint32 id = 1;               //id of the radio unit
    uint32 nb_multi_css = 2;     //number of multi css channels supported
    uint32 nb_single_css = 3;    //number of single css channels supported
    uint32 nb_fsk = 4;           //number of fsk channels supported
    uint32 nb_lrfhss = 5;        //number of lr-fhss channels supported
    bool fine_time_stamp = 6;    //true if the radio unit supports fine time stamping
    repeated TxModulation = 7;   //Modulations this radio unit supports
}

//to be defined
message RadioUnitConfig {}

//to be defined
message RadioUnitResponse {}

//Asynchronous events generated by a radio unit.
message RadioUnitEvent {
    enum RadioUnitState {
        RU_UNKONWN = 0;          //Unkown state
        RU_INIT    = 1;          //Radio unit gets initialized
        RU_RUNNING = 2;          //Radio unit has finished initialization and is functional
        RU_FAILED  = 3;          //Radio unit failed
    }

    uint32 id = 1;               //MANDATORY
    RadioUnitState ru_state = 2; //State changes are sent from GW to NS.
}


// ******************************************** Antenna messages *************************************

enum AntennaType {
    OMNI = 0;                    //OMNI Antenna
    SECTOR = 1;                  //Sectorized Antenna
}

//Antenna mode MAY be configured during operation
enum AntennaMode {
    RX_TX = 0;                //Antenna will be used for receiving and sending messages
    RX_ONLY = 1;              //Antenna will be used for receiving messages only 
    RX_TX_OFF = 2;            //Antenna SHALL not be used
}

//Antennas MAY contain both, description of the capabilities and the configuration
message Antennas {
    repeated AntennaCapabilities antennas_capabilities = 1;
    repeated AntennaConfig antennas_configs= 2;
}

//read-only capabilities of the antenna
message AntennaCapabilities {
    uint32 id = 1;             //Identifier of the antenna, defined by GW
    uint32 radio_unit = 2;     //id of the radio unit this antenna is attached to
    bool fix = 3;              //true if the antenna is fix installed and not changable 
    string port_label = 4;     //external label of the antenna port
    uint32 max_gain = 5;       //max allowed antenna gain according the certification. This value MAY depend on the region of operation
    uint32 min_freq = 6;       //minimal frequency in Hz the antenna supports
    uint32 max_freq = 7;       //maximal frequency in Hz th antenna supports
}

//configuration of the antenna
//fields up to id 6 are used to represent the installation
//fields 11 and higher are used to configure operations mode. 
message AntennaConfig {
    uint32 id = 1;             //MANDATORY: ID of the antenna, cannot be overwriten
    bool present = 2;          //indicate if antenna is present or not installed
    uint32 ant_gain = 3;       //antenna gain in dB
    uint32 insertion_loss = 4; //insertion loss in dB
    AntennaType ant_type = 5;  //Antenna type
    uint32 delay = 6;          //delay of signal in ns from antenna to gw, only relevant for fine time stamping
    AntennaMode ant_mode = 11; //mode of usage
}

//Response to an antenna config request.
message AntennaResponse {
    message AntennaResponseSuccess{
    }
    message AntennaResponseFailure{
        enum AntennaError{
            ANT_UNKNOWN_ERROR = 0;
            ANT_ID_UNKNOWN = 1;      //ID of antenna is not known on GW
            ANT_NOT_PRESENT = 2;     //atnenna to be configured is not present
            ANT_GAIN_EXCEED = 3;     //requested gain exceeds certified max gain 
            ANT_MODE_ERROR = 4;      //requested antenna mode is not supported or unknown 
        }

        AntennaError ant_error = 1;
        uint32 ant_id = 2;           //ID of Antenna whose config caused an error.  
    }

    oneof antenna_response {
        AntennaResponseSuccess ant_success = 1;
        AntennaResponseFailure ant_failure = 2;
    }
}

// ******************************************** Data Rate Table messages *********************************

//the GW has one table for data rate configurations. The table may hold datarate definitions of multiple channel plans, therfore
//the cp_id, representing the channel plan id (according RP-002, chapter 2) is added the DR table row.  
message DataRateTableConfig {
    uint32 id = 1;             //id is defined by the NS. Identical DR Table configs on different GWs shall have the same ID.
    string label = 2;          //label, defined by NS
    uint32 version = 3;        //version of the DR Table and label. 

    repeated DataRateRow data_rates = 11;
}

//to be worked on
message DataRateTableResponse {}

//a data rate table row specifies one datarate.
message DataRateRow {
    message LoRaRow {
        uint32 sf = 1;         //Spreading Factor [7..12]
        uint32 bw = 2;         //bandwidth in kHz
    }
    message FSKRow {
        uint32 kbps = 1;       //Capacity in kbps
    }
    message LRFHSSRow {
        enum CR {
            UNKNOWN_CR = 0;
            CR_1_3 = 1;         //CR 1/3
            CR_2_3 = 2;         //CR 2/3
        }
        CR cr = 1;              //Coding rate
        uint32 bw = 2;          //bandwidth in kHz
    }

    uint32 id = 1;              //row ID, for data management only
    uint32 cp_id = 2;           //Channel plan ID according RP-002
    uint32 dr = 3;              //Data rate according RP-002
    bool uplink = 4;            //true if this DR Row is used for uplinks
    oneof dr_row {
        LoRaRow lora_dr = 11;
        FSKRow  fsk_dr  = 12;
        LRFHSSRow lrfhss_dr = 13;
    }
}


// ******************************************** Channel Configuration messages *********************************


//Channel configuration table: There is one ChannelConfiguration per GW, holding all defined RXChannels. 
//The table is identified by the ID, the label and version are supportin attributes. The ID is defined by
//the NS and re-used for identical ChannelConfigurations. 
//ChannelConfiguratin MAY be sent from NS to GW or requested by GW from NS or requested by NS from GW.
//If the ChannelConfiguration is requested by the NS, only the ID, label, and version are reported, except
//the query parameter f is set to True. Then the full table is sent in the resonse. 
//As default, the GW has no ChannelConfiguration preloaded. 
//Channel Configuration abborts at if a channel configuration causes an error. 
message ChannelConfiguration {
    uint32 id = 1;             //id is defined by the NS. Identical ChannelConfigs on different GWs shall have the same ID.
    string label = 2;
    uint32 version = 3;

    repeated RXChannel rx_channels = 11;
}

message ChannelConfigResponse {
    message ChannelConfigSuccess {}
    message ChannelConfigFailure {
        enum ChannelConfigError {
            CH_ERROR_UNKNOWN = 0;
            CH_ERROR_ANTENNA  = 1;           //Antenna ID is not known on this GW
            CH_ERROR_FREQ_OUT_OF_RANGE = 2;  //Frequency is out of allowed range or frequency is not supported on specified antenna.
            CH_ERROR_CHANNEL_PLAN = 3;       //ChannelPlan not supported on this GW
            CH_ERROR_DR = 4;                 //DataRate not supported 
            CH_ERROR_RANGE = 5;              //Range exceeding allowed data rates. 

        }

        ChannelConfigError error = 1;
        uint32 channel_id = 2;               //affected RXChannel id
    }

    oneof channel_config_response{
        ChannelConfigSuccess channel_config_success = 1;  //all RX-Channels are successfully installed
        ChannelConfigFailure channel_config_failure = 2;  //at least one of the channels could not be configured. 
    } 

}

//single RXChannel definition. Single channels are not configured individualy. 
message RXChannel {
    uint32 id = 1;
    bool enabled = 2;
    uint32 antenna_id = 3;
    uint32 frequecy = 4;        //frequency of channel in Hz
    uint32 cp_id = 5;           //Channel plan ID 
    uint32 dr_low = 6;          //DR lower range limit for multi css channel definitions, or DR for single DR channels
    uint32 dr_high = 7;         //DR higher range limit for multi css channels only,
}


// ******************************************** Fine Timestamping messages ****************************************
// to be worked out
message FineTimeStampCapabilities {}
message FineTimeStampConfig {}
message FineTimeStampResponse {}
message FineTimeStampEvent {}

